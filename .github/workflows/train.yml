name: train-mlflow

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
    env:
      MLFLOW_TRACKING_URI: http://127.0.0.1:5000
      MLFLOW_DB_URI: sqlite:///C:/mlflow-data/tp-mlflow-automation/mlflow.db
      MLFLOW_ARTIFACTS_DIR: C:/mlflow-data/tp-mlflow-automation/artifacts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install mlflow requests pytest

      - name: Ensure MLflow server running (local & persistent)
        run: |
          New-Item -ItemType Directory -Force "C:\mlflow-data\tp-mlflow-automation" | Out-Null
          New-Item -ItemType Directory -Force "$env:MLFLOW_ARTIFACTS_DIR" | Out-Null
          $conn = Get-NetTCPConnection -LocalPort 5000 -ErrorAction SilentlyContinue
          if (-not $conn) {
            $args = @(
              "-m","mlflow","server",
              "--backend-store-uri",$env:MLFLOW_DB_URI,
              "--artifacts-destination",$env:MLFLOW_ARTIFACTS_DIR,
              "--host","127.0.0.1","--port","5000"
            )
            Start-Process -FilePath "python" -ArgumentList $args -WindowStyle Hidden
            $ok = $false
            for ($i = 0; $i -lt 30; $i++) {
              try {
                Invoke-WebRequest -Uri $env:MLFLOW_TRACKING_URI -TimeoutSec 2 | Out-Null
                $ok = $true; break
              } catch { Start-Sleep -Seconds 1 }
            }
            if (-not $ok) { throw "MLflow server did not become ready on port 5000." }
          }

      - name: Smoke check MLflow
        run: |
          Set-Content -LiteralPath smoke.py -Value @'
          import os, urllib.request
          url = os.environ["MLFLOW_TRACKING_URI"]
          with urllib.request.urlopen(url, timeout=10) as resp:
              print("MLflow UI reachable:", resp.getcode())
          '@
          python smoke.py

      - name: Run tests
        run: |
          pytest -q

      - name: Train and log model (to your local MLflow)
        run: |
          python src\train.py --experiment-name "ci-experiment" --registered-model-name "IrisClassifier" --C 1.0 --max-iter 200 --seed 42 --min-accuracy 0.8

      - name: Show top runs (from local MLflow)
        run: |
          Set-Content -LiteralPath show_runs.py -Value @'
          import os, mlflow
          from mlflow.tracking import MlflowClient

          print("Tracking URI:", os.getenv("MLFLOW_TRACKING_URI"))
          c = MlflowClient()
          exps = {e.name: e.experiment_id for e in c.search_experiments()}
          eid = exps.get("ci-experiment")
          if eid:
              runs = c.search_runs([eid], order_by=["metrics.accuracy DESC"], max_results=5)
              for r in runs:
                  print(r.info.run_id, r.data.metrics.get("accuracy"))
          else:
              print("Experiment 'ci-experiment' not found") # fghfg
          '@
          python show_runs.py

name: train-mlflow

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
    env:
      # Emplacements persistants
      MLFLOW_DB_URI: sqlite:///C:/mlflow-data/tp-mlflow-automation/mlflow.db
      MLFLOW_ARTIFACTS_DIR: C:/mlflow-data/tp-mlflow-automation/artifacts
      # Port fixe pour l'UI
      MLFLOW_TRACKING_URI: http://127.0.0.1:5000

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create venv (from Actions Python)
        run: |
          Remove-Item Env:PYTHONHOME, Env:PYTHONPATH -ErrorAction SilentlyContinue
          & "$env:PythonLocation\python.exe" -m venv .venv
          $venv = Join-Path $env:GITHUB_WORKSPACE '.venv\Scripts\python.exe'
          & $venv -c "import sys,ssl; print('PY:', sys.executable); print('SSL OK:', bool(ssl))"
          "VENV_PY=$venv" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Install deps (in venv)
        run: |
          $py = $env:VENV_PY
          & $py -m pip install --upgrade pip setuptools wheel
          if (Test-Path requirements.txt) { & $py -m pip install -r requirements.txt }
          & $py -m pip install "mlflow>=2.8,<3" requests pytest

      # UI MLflow PERSISTANTE via tâche planifiée (SYSTEM). Pas de mode éphémère.
      - name: Install & start persistent MLflow UI on port 5000 (Scheduled Task), then wait
        run: |
          $ErrorActionPreference = 'Stop'
          $py = $env:VENV_PY
          $port = 5000

          # Dossiers persistants
          New-Item -ItemType Directory -Force "C:\mlflow-data\tp-mlflow-automation" | Out-Null
          New-Item -ItemType Directory -Force "$env:MLFLOW_ARTIFACTS_DIR" | Out-Null

          # URI file:/// pour artefacts
          $art = ($env:MLFLOW_ARTIFACTS_DIR -replace '\\','/')
          if ($art -notmatch '^file:') { $artUri = "file:///$art" } else { $artUri = $art }

          # Script PowerShell appelé par la tâche (logs persistants)
          $venvPy = Join-Path $env:GITHUB_WORKSPACE '.venv\Scripts\python.exe'
          $script = Join-Path $env:GITHUB_WORKSPACE 'start-mlflow-ui.ps1'
          @(
            '$ErrorActionPreference = "Stop"',
            '$port = 5000',
            '$py = "' + $venvPy + '"',
            '$db = "sqlite:///C:/mlflow-data/tp-mlflow-automation/mlflow.db"',
            '$art = "' + $artUri + '"',
            '$logDir = "C:\mlflow-data\tp-mlflow-automation"',
            'New-Item -ItemType Directory -Force $logDir | Out-Null',
            '$out = Join-Path $logDir "ui-5000.out"',
            '$err = Join-Path $logDir "ui-5000.err"',
            '& $py -m mlflow server --backend-store-uri $db --serve-artifacts --artifacts-destination $art --host 127.0.0.1 --port $port 1>> $out 2>> $err'
          ) | Set-Content -LiteralPath $script -Encoding UTF8

          # Supprime proprement l'ancienne tâche si elle existe (évite les erreurs "introuvable")
          cmd /c 'schtasks /Query /TN "MLflowUI-5000" >nul 2>&1'
          if ($LASTEXITCODE -eq 0) {
            cmd /c 'schtasks /End /TN "MLflowUI-5000" >nul 2>&1 || exit /b 0'
            cmd /c 'schtasks /Delete /TN "MLflowUI-5000" /F >nul 2>&1 || exit /b 0'
          }

          # Crée la tâche sous SYSTEM, au démarrage, niveau élevé
          $tr = 'powershell.exe -NoProfile -ExecutionPolicy Bypass -File "' + $script + '"'
          cmd /c ('schtasks /Create /TN "MLflowUI-5000" /RU "SYSTEM" /SC ONSTART /RL HIGHEST /TR "' + $tr + '" /F')
          if ($LASTEXITCODE -ne 0) { throw "Failed to create scheduled task MLflowUI-5000" }

          # Lance maintenant
          cmd /c 'schtasks /Run /TN "MLflowUI-5000" >nul 2>&1'
          if ($LASTEXITCODE -ne 0) { throw "Failed to run scheduled task MLflowUI-5000" }

          # Attends jusqu'à 120s que l'UI réponde
          $ok = $false
          for ($i=0; $i -lt 60; $i++) {
            try {
              Invoke-WebRequest -UseBasicParsing -Uri "http://127.0.0.1:$port" -TimeoutSec 2 | Out-Null
              $ok = $true; break
            } catch {
              Start-Sleep -Seconds 2
            }
          }
          if (-not $ok) {
            Write-Host "=== Task query (status) ==="
            cmd /c 'schtasks /Query /TN "MLflowUI-5000" /V /FO LIST' | Out-Host
            Write-Host "=== Persistent UI logs (tail) ==="
            Get-Content -LiteralPath "C:\mlflow-data\tp-mlflow-automation\ui-5000.err" -Tail 120 -ErrorAction SilentlyContinue
            Get-Content -LiteralPath "C:\mlflow-data\tp-mlflow-automation\ui-5000.out" -Tail 120 -ErrorAction SilentlyContinue
            throw "MLflow UI did not become ready on 127.0.0.1:$port"
          } else {
            Write-Host "MLflow UI is running on http://127.0.0.1:$port (Scheduled Task MLflowUI-5000)"
          }

      - name: Smoke, tests, train, show (use persistent UI on 5000)
        run: |
          $py = $env:VENV_PY

          # Smoke
          @(
            'import os, requests',
            "url = os.environ.get('MLFLOW_TRACKING_URI','http://127.0.0.1:5000')",
            'r = requests.get(url, timeout=5)',
            'print("MLflow UI reachable:", r.status_code)'
          ) | Set-Content -LiteralPath smoke.py -Encoding UTF8
          & $py smoke.py

          # Tests
          & $py -m pytest -q

          # Train (aucune contrainte d’accuracy qui ferait échouer le run)
          & $py src\train.py --experiment-name "ci-experiment" --registered-model-name "IrisClassifier" --C 1.0 --max-iter 200 --seed 42 --min-accuracy 0.0

          # Show runs
          @(
            'import os, mlflow',
            'from mlflow.tracking import MlflowClient',
            "print('Tracking URI:', os.getenv('MLFLOW_TRACKING_URI'))",
            'c = MlflowClient()',
            'exps = {e.name: e.experiment_id for e in c.search_experiments()}',
            "eid = exps.get('ci-experiment')",
            'if eid:',
            "    runs = c.search_runs([eid], order_by=['metrics.accuracy DESC'], max_results=5)",
            '    for r in runs:',
            "        print(r.info.run_id, r.data.metrics.get('accuracy'))",
            'else:',
            '    print("Experiment ''ci-experiment'' not found")'
          ) | Set-Content -LiteralPath show_runs.py -Encoding UTF8
          & $py show_runs.py

      - name: Open MLflow UI in browser
        run: |
          try {
            Invoke-WebRequest -UseBasicParsing -Uri "http://127.0.0.1:5000" -TimeoutSec 2 | Out-Null
            Start-Process "cmd.exe" "/c start http://127.0.0.1:5000"
          } catch {
            Write-Host "UI not reachable now; open http://127.0.0.1:5000 manually."
          }



















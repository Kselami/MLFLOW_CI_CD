name: train-mlflow

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
    env:
      MLFLOW_TRACKING_URI: http://127.0.0.1:5000
      MLFLOW_DB_URI: sqlite:///C:/mlflow-data/tp-mlflow-automation/mlflow.db
      MLFLOW_ARTIFACTS_DIR: C:/mlflow-data/tp-mlflow-automation/artifacts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Bootstrap pip (force install with get-pip.py)
        run: |
          # Nettoie les env vars qui cassent la résolution de la stdlib
          Remove-Item Env:PYTHONHOME, Env:PYTHONPATH -ErrorAction SilentlyContinue

          $py = Join-Path $env:PythonLocation 'python.exe'
          Write-Host "Using Python:" $py
          & $py -c "import sys;print(sys.version);print(sys.executable)"

          $pipOK = $true
          try { & $py -m pip --version } catch { $pipOK = $false }

          if (-not $pipOK) {
            Write-Host "pip absent -> téléchargement de get-pip.py"
            $gp = "get-pip.py"
            Invoke-WebRequest -UseBasicParsing -Uri https://bootstrap.pypa.io/get-pip.py -OutFile $gp
            & $py $gp
          }

          # Vérif finale + upgrade base
          & $py -m pip --version
          & $py -m pip install --upgrade pip setuptools wheel

      - name: Install deps
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          if (Test-Path requirements.txt) { & $py -m pip install -r requirements.txt }
          & $py -m pip install "mlflow>=2.8,<3" requests pytest

      - name: Verify Python & mlflow
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          & $py -c "import sys,mlflow;print(sys.executable);print('mlflow',mlflow.__version__)"

      - name: Ensure MLflow server running (local & persistent)
        run: |
          $py  = Join-Path $env:PythonLocation 'python.exe'
          New-Item -ItemType Directory -Force "C:\mlflow-data\tp-mlflow-automation" | Out-Null
          New-Item -ItemType Directory -Force "$env:MLFLOW_ARTIFACTS_DIR" | Out-Null

          # Windows path -> file:/// URI
          $art = ($env:MLFLOW_ARTIFACTS_DIR -replace '\\','/')
          if ($art -notmatch '^file:') { $artUri = "file:///$art" } else { $artUri = $art }

          $port = 5000
          $out = "mlflow-server.out"
          $err = "mlflow-server.err"
          if (Test-Path $out) { Remove-Item $out -Force }
          if (Test-Path $err) { Remove-Item $err -Force }

          $args = @(
            "-m","mlflow","server",
            "--backend-store-uri",$env:MLFLOW_DB_URI,
            "--artifacts-destination",$artUri,
            "--host","127.0.0.1","--port",$port
          )

          Start-Process -FilePath $py -ArgumentList $args `
            -RedirectStandardOutput $out -RedirectStandardError $err -WindowStyle Hidden

          # Attendre jusqu'à 120s que l'UI réponde
          $ok = $false
          for ($i = 0; $i -lt 60; $i++) {
            try {
              Invoke-WebRequest -Uri $env:MLFLOW_TRACKING_URI -TimeoutSec 2 | Out-Null
              $ok = $true; break
            } catch {
              Start-Sleep -Seconds 2
            }
          }
          if (-not $ok) {
            Write-Host "=== mlflow-server.err (tail) ==="
            Get-Content -LiteralPath $err -Tail 200 -ErrorAction SilentlyContinue
            Write-Host "=== mlflow-server.out (tail) ==="
            Get-Content -LiteralPath $out -Tail 200 -ErrorAction SilentlyContinue
            throw "MLflow server did not become ready on port $port."
          }

      - name: Smoke check MLflow
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          Set-Content -LiteralPath smoke.py -Value @'
          im






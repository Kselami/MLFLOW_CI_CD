name: train-mlflow

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
    env:
      MLFLOW_TRACKING_URI: http://127.0.0.1:5000
      MLFLOW_DB_URI: sqlite:///C:/mlflow-data/tp-mlflow-automation/mlflow.db
      MLFLOW_ARTIFACTS_DIR: C:/mlflow-data/tp-mlflow-automation/artifacts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Bootstrap pip if missing (fix PYTHONHOME/PYTHONPATH)
        run: |
          # Supprime les var d'env qui cassent Python
          Remove-Item Env:PYTHONHOME, Env:PYTHONPATH -ErrorAction SilentlyContinue

          $py = Join-Path $env:PythonLocation 'python.exe'

          Write-Host "Using Python:" $py
          & $py -c "import sys;print(sys.version);print(sys.executable)"

          # Vérifie pip
          $pipOk = $true
          try { & $py -m pip --version } catch { $pipOk = $false }

          if (-not $pipOk) {
            Write-Host "pip absent -> ensurepip..."
            try {
              & $py -m ensurepip --upgrade
            } catch {
              Write-Host "ensurepip indisponible, fallback get-pip.py"
            }
          }

          # Recheck pip
          $pipOk = $true
          try { & $py -m pip --version } catch { $pipOk = $false }

          if (-not $pipOk) {
            Write-Host "Téléchargement get-pip.py..."
            $gp = "get-pip.py"
            Invoke-WebRequest -UseBasicParsing -Uri https://bootstrap.pypa.io/get-pip.py -OutFile $gp
            & $py $gp
          }

          # Final: afficher versions
          & $py -m pip --version
          & $py -m pip install --upgrade pip setuptools wheel

      - name: Install deps (in Actions Python)
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          if (Test-Path requirements.txt) { & $py -m pip install -r requirements.txt }
          & $py -m pip install "mlflow>=2.8,<3" requests pytest

      - name: Verify Python & mlflow
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          & $py -c "import sys,mlflow;print(sys.executable);print('mlflow',mlflow.__version__)"

      - name: Ensure MLflow server running (local & persistent)
        run: |
          $py  = Join-Path $env:PythonLocation 'python.exe'
          New-Item -ItemType Directory -Force "C:\mlflow-data\tp-mlflow-automation" | Out-Null
          New-Item -ItemType Directory -Force "$env:MLFLOW_ARTIFACTS_DIR" | Out-Null

          # Windows path -> file:/// URI
          $art = ($env:MLFLOW_ARTIFACTS_DIR -replace '\\','/')
          if ($art -notmatch '^file:') { $artUri = "file:///$art" } else { $artUri = $art }

          $port = 5000
          $out = "mlflow-server.out"
          $err = "mlflow-server.err"
          if (Test-Path $out) { Remove-Item $out -Force }
          if (Test-Path $err) { Remove-Item $err -Force }

          $args = @(
            "-m","mlflow","server",
            "--backend-store-uri",$env:MLFLOW_DB_URI,
            "--artifacts-destination",$artUri,
            "--host","127.0.0.1","--port",$port
          )

          # Démarre avec le bon Python (celui d'actions/setup-python)
          Start-Process -FilePath $py -ArgumentList $args `
            -RedirectStandardOutput $out -RedirectStandardError $err -WindowStyle Hidden

          # Attendre jusqu'à 120s
          $ok = $false
          for ($i = 0; $i -lt 60; $i++) {
            try {
              Invoke-WebRequest -Uri $env:MLFLOW_TRACKING_URI -TimeoutSec 2 | Out-Null
              $ok = $true; break
            } catch {
              Start-Sleep -Seconds 2
            }
          }
          if (-not $ok) {
            Write-Host "=== mlflow-server.err (tail) ==="
            Get-Content -LiteralPath $err -Tail 200 -ErrorAction SilentlyContinue
            Write-Host "=== mlflow-server.out (tail) ==="
            Get-Content -LiteralPath $out -Tail 200 -ErrorAction SilentlyContinue
            throw "MLflow server did not become ready on port $port."
          }

      - name: Smoke check MLflow
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          Set-Content -LiteralPath smoke.py -Value @'
          import os, urllib.request
          url = os.environ["MLFLOW_TRACKING_URI"]
          with urllib.request.urlopen(url, timeout=10) as resp:
              print("MLflow UI reachable:", resp.getcode())
          '@
          & $py smoke.py

      - name: Run tests
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          & $py -m pytest -q

      - name: Train and log model (to your local MLflow)
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          & $py src\train.py --experiment-name "ci-experiment" --registered-model-name "IrisClassifier" --C 1.0 --max-iter 200 --seed 42 --min-accuracy 0.8

      - name: Show top runs (from local MLflow)
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          Set-Content -LiteralPath show_runs.py -Value @'
          import os, mlflow
          from mlflow.tracking import MlflowClient

          print("Tracking URI:", os.getenv("MLFLOW_TRACKING_URI"))
          c = MlflowClient()
          exps = {e.name: e.experiment_id for e in c.search_experiments()}
          eid = exps.get("ci-experiment")
          if eid:
              runs = c.search_runs([eid], order_by=["metrics.accuracy DESC"], max_results=5)
              for r in runs:
                  print(r.info.run_id, r.data.metrics.get("accuracy"))
          else:
              print("Experiment 'ci-experiment' not found")
          '@
          & $py show_runs.py





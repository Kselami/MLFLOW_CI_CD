name: train-mlflow

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
    env:
      # valeurs par défaut (seront remplacées par la sélection de port dynamique)
      MLFLOW_TRACKING_URI: http://127.0.0.1:5000
      MLFLOW_DB_URI: sqlite:///C:/mlflow-data/tp-mlflow-automation/mlflow.db
      MLFLOW_ARTIFACTS_DIR: C:/mlflow-data/tp-mlflow-automation/artifacts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Bootstrap pip (force, no assumptions)
        run: |
          Remove-Item Env:PYTHONHOME, Env:PYTHONPATH -ErrorAction SilentlyContinue
          $py = Join-Path $env:PythonLocation 'python.exe'
          Write-Host "Using Python: $py"
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 -bor [Net.SecurityProtocolType]::Tls13
          $gp = "get-pip.py"
          if (Test-Path $gp) { Remove-Item $gp -Force }
          Invoke-WebRequest -UseBasicParsing -Uri https://bootstrap.pypa.io/get-pip.py -OutFile $gp -ErrorAction Stop
          $p = Start-Process -FilePath $py -ArgumentList $gp -PassThru -Wait
          if ($p.ExitCode -ne 0) { throw "pip bootstrap failed: $($p.ExitCode)" }
          & $py -m pip --version
          & $py -m pip install --upgrade pip setuptools wheel

      - name: Install deps
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          if (Test-Path requirements.txt) { & $py -m pip install -r requirements.txt }
          & $py -m pip install "mlflow>=2.8,<3" requests pytest

      - name: Verify Python & mlflow
        run: |
          $py = Join-Path $env:PythonLocation 'python.exe'
          & $py -c "import sys, mlflow; print(sys.executable); print('mlflow', mlflow.__version__)"

      - name: Pick a free port and export MLFLOW_TRACKING_URI
        run: |
          $listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Loopback, 0)
          $listener.Start()
          $port = ($listener.LocalEndpoint).Port











name: train-mlflow

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
    env:
      # Emplacements persistants
      MLFLOW_DB_URI: sqlite:///C:/mlflow-data/tp-mlflow-automation/mlflow.db
      MLFLOW_ARTIFACTS_DIR: C:/mlflow-data/tp-mlflow-automation/artifacts
      # Port fixe pour l'UI
      MLFLOW_TRACKING_URI: http://127.0.0.1:5000

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create venv (from Actions Python)
        run: |
          Remove-Item Env:PYTHONHOME, Env:PYTHONPATH -ErrorAction SilentlyContinue
          & "$env:PythonLocation\python.exe" -m venv .venv
          $venv = Join-Path $env:GITHUB_WORKSPACE '.venv\Scripts\python.exe'
          & $venv -c "import sys,ssl; print('PY:', sys.executable); print('SSL OK:', bool(ssl))"
          "VENV_PY=$venv" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Install deps (in venv)
        run: |
          $py = $env:VENV_PY
          & $py -m pip install --upgrade pip setuptools wheel
          if (Test-Path requirements.txt) { & $py -m pip install -r requirements.txt }
          & $py -m pip install "mlflow>=2.8,<3" requests pytest

      - name: Run pipeline on fixed port 5000 (start server, smoke, tests, train, show, open browser)
        run: |
          $py = $env:VENV_PY
          $port = 5000

          # Prépare dossiers persistants
          New-Item -ItemType Directory -Force "C:\mlflow-data\tp-mlflow-automation" | Out-Null
          New-Item -ItemType Directory -Force "$env:MLFLOW_ARTIFACTS_DIR" | Out-Null

          # file:/// URI pour les artefacts
          $art = ($env:MLFLOW_ARTIFACTS_DIR -replace '\\','/')
          if ($art -notmatch '^file:') { $artUri = "file:///$art" } else { $artUri = $art }

          # Logs dédiés
          $out = "mlflow-ui-5000.out"
          $err = "mlflow-ui-5000.err"
          Remove-Item $out, $err -Force -ErrorAction SilentlyContinue

          # Si un autre process occupe 5000, on le tue
          $conns = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
          if ($conns) {
            ($conns | Select-Object -ExpandProperty OwningProcess -Unique) | ForEach-Object {
              try { Stop-Process -Id $_ -Force } catch {}
            }
            Start-Sleep -Seconds 1
          }

          # Démarre MLflow et GARDE le process pendant toute la step
          $args = @(
            "-m","mlflow","server",
            "--backend-store-uri",$env:MLFLOW_DB_URI,
            "--serve-artifacts",
            "--artifacts-destination",$artUri,
            "--host","127.0.0.1","--port",$port
          )
          $proc = Start-Process -FilePath $py -ArgumentList $args `
                   -RedirectStandardOutput $out -RedirectStandardError $err `
                   -WindowStyle Hidden -PassThru
          Write-Host "MLflow PID: $($proc.Id)"

          $keepServer = $false
          try {
            # Attendre la disponibilité (port + HTTP)
            $ok = $false
            for ($i=0; $i -lt 30; $i++) {
              try {
                if ($proc.HasExited) { break }
                $tcp = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
                if ($tcp -and $tcp.State -in @('Listen','Established')) {
                  Invoke-WebRequest -UseBasicParsing -Uri "http://127.0.0.1:$port" -TimeoutSec 2 | Out-Null
                  $ok = $true; break
                }
              } catch {}
              Start-Sleep -Seconds 2
            }
            if (-not $ok) {
              Write-Host "=== mlflow-ui-5000.err (tail) ==="; Get-Content -LiteralPath $err -Tail 200 -ErrorAction SilentlyContinue
              Write-Host "=== mlflow-ui-5000.out (tail) ==="; Get-Content -LiteralPath $out -Tail 200 -ErrorAction SilentlyContinue
              throw "MLflow UI did not become ready on 127.0.0.1:$port"
            }

            # Smoke
            @(
              'import os, requests',
              "url = 'http://127.0.0.1:$port'",
              'r = requests.get(url, timeout=5)',
              'print("MLflow UI reachable:", r.status_code)'
            ) | Set-Content -LiteralPath smoke.py -Encoding UTF8
            & $py smoke.py

            # Tests
            & $py -m pytest -q

            # Train (aucune contrainte d’accuracy qui ferait échouer le run)
            & $py src\train.py --experiment-name "ci-experiment" --registered-model-name "IrisClassifier" --C 1.0 --max-iter 200 --seed 42 --min-accuracy 0.0

            # Show runs
            @(
              'import os, mlflow',
              'from mlflow.tracking import MlflowClient',
              "os.environ['MLFLOW_TRACKING_URI'] = 'http://127.0.0.1:$port'",
              "print('Tracking URI:', os.getenv('MLFLOW_TRACKING_URI'))",
              'c = MlflowClient()',
              'exps = {e.name: e.experiment_id for e in c.search_experiments()}',
              "eid = exps.get('ci-experiment')",
              'if eid:',
              "    runs = c.search_runs([eid], order_by=['metrics.accuracy DESC'], max_results=5)",
              '    for r in runs:',
              "        print(r.info.run_id, r.data.metrics.get('accuracy'))",
              'else:',
              '    print("Experiment ''ci-experiment'' not found")'
            ) | Set-Content -LiteralPath show_runs.py -Encoding UTF8
            & $py show_runs.py

            # Ouvre le navigateur et laisse le serveur tourner
            Start-Process "cmd.exe" "/c start http://127.0.0.1:$port"
            Start-Sleep -Seconds 3
            $keepServer = $true
          }
          catch {
            Write-Host "Pipeline failed: $_"
            throw
          }
          finally {
            Write-Host "=== mlflow-ui-5000.err (tail) ==="; Get-Content -LiteralPath $err -Tail 200 -ErrorAction SilentlyContinue
            Write-Host "=== mlflow-ui-5000.out (tail) ==="; Get-Content -LiteralPath $out -Tail 200 -ErrorAction SilentlyContinue
            if (-not $keepServer) {
              try { if ($proc -and -not $proc.HasExited) { Stop-Process -Id $proc.Id -Force; Write-Host 'MLflow server stopped (failure).' } } catch {}
            } else {
              Write-Host "MLflow server left running on 127.0.0.1:$port"
            }
          }

















